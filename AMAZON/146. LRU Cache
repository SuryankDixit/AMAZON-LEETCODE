class LRUCache {
public:
    
    int capacity_=0;
    list<int> keys_put;
    unordered_map<int,pair<int,list<int>::iterator>> map_get; 
    
    LRUCache(int capacity) {
        capacity_=capacity;
    }
    
    int get(int key) {
        auto it=map_get.find(key);
        if(it==map_get.end())
            return -1;
        
        helper_fun(it);
        return it->second.first;
    }
    
    void put(int key, int value) {
        auto it=map_get.find(key);
        if(it!=map_get.end())
            helper_fun(it);
        else
        {
            if(map_get.size()==capacity_)
            {
                map_get.erase(keys_put.back());
                keys_put.pop_back();
            }
            keys_put.push_front(key);
            map_get[key]={value,keys_put.begin()};
        }
        map_get[key]={value,keys_put.begin()};
    }
    
    void helper_fun(unordered_map<int,pair<int,list<int>::iterator>>::iterator itr)
    {
        int key=itr->first;
        keys_put.erase(itr->second.second);
        keys_put.push_front(key);
        itr->second.second=keys_put.begin();
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
